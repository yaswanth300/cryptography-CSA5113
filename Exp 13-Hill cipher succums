#include <stdio.h>
int modInverse(int a) {
    for (int i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1)
            return i;
    }
    return -1; // No inverse exists
}
int matrixInverse(int m[2][2], int inv[2][2]) {
    int det = (m[0][0] * m[1][1] - m[0][1] * m[1][0]) % 26;
    if (det < 0) det += 26;

    int invDet = modInverse(det);
    if (invDet == -1) return 0; // Not invertible

    inv[0][0] = ( m[1][1] * invDet) % 26;
    inv[0][1] = (-m[0][1] * invDet + 26) % 26;
    inv[1][0] = (-m[1][0] * invDet + 26) % 26;
    inv[1][1] = ( m[0][0] * invDet) % 26;

    return 1;
}
void matrixMultiply(int a[2][2], int b[2][2], int result[2][2]) {
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < 2; k++)
                result[i][j] += a[i][k] * b[k][j];
            result[i][j] %= 26;
        }
}
void printMatrix(int m[2][2]) {
    for (int i = 0; i < 2; i++)
        printf("| %2d %2d |\n", m[i][0], m[i][1]);
}
int main() {
    int P [2][2] = {{7, 4}, {11, 15}}; // Plaintext matrix
    int C [2][2] = {{5, 14}, {19, 15}}; // Ciphertext matrix
    int P_inv[2][2], K[2][2];
    if (!matrixInverse(P, P_inv)) {
        printf("Plaintext matrix is not invertible modulo 26.\n");
        return 1;
    }
    matrixMultiply(C, P_inv, K);
    printf("Recovered Key Matrix K:\n");
    printMatrix(K);
    return 0;
}
