#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_LEN 1000
#define ALPHABET_SIZE 26
double english_freq[26] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228,
    2.015, 6.094, 6.966, 0.153, 0.772, 4.025,
    2.406, 6.749, 7.507, 1.929, 0.095, 5.987,
    6.327, 9.056, 2.758, 0.978, 2.360, 0.150,
    1.974, 0.074
};
void decrypt_caesar(char *ciphertext, int key, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        char c = tolower(ciphertext[i]);
        if (isalpha(c)) {
            plaintext[i] = ((c - 'a' - key + 26) % 26) + 'a';
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}
double score_text(char *text) {
    int count[26] = {0}, total = 0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            count[text[i] - 'a']++;
            total++;
        }
    }
    double score = 0;
    for (int i = 0; i < 26; i++) {
        double freq = (total > 0) ? (count[i] * 100.0 / total) : 0;
        score += english_freq[i] * freq;
    }
    return score;
}
typedef struct {
    int key;
    char text [MAX_LEN];
    double score;
} Result;
int compare_results(const void *a, const void *b) {
    return ((Result *) b)->score - ((Result *)a)->score;
}
int main () {
    char ciphertext [MAX_LEN];
    int topN;
    printf("Enter ciphertext: ");
    fgets(ciphertext, MAX_LEN, stdin);
    ciphertext [strcspn(ciphertext, "\n")] = '\0';
    printf("How many top plaintexts to show? ");
    scanf("%d", &topN);
    Result results [26];
    for (int k = 0; k < 26; k++) {
        decrypt_caesar(ciphertext, k, results[k].text);
        results[k].key = k;
        results[k].score = score_text(results[k].text);
    }
    qsort(results, 26, sizeof(Result), compare_results);
    printf("\nTop %d likely plaintexts:\n", topN);
    for (int i = 0; i < topN && i < 26; i++) {
        printf("Key = %2d | Score = %.2f | Plaintext: %s\n", results[i].key, results[i].score, results[i].text);
    }
    return 0;
}
