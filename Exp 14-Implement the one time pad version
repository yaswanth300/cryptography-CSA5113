#include <stdio.h>
#include <string.h>
#include <ctype.h>

void encrypt (char *plaintext, int key[], char *ciphertext) {
    int i;
    for (i = 0; plaintext[i]; i++) {
        char ch = tolower(plaintext[i]);
        if (ch >= 'a' && ch <= 'z') {
            int p = ch - 'a';
            int c = (p + key[i]) % 26;
            ciphertext[i] = c + 'A'; // Uppercase ciphertext
        } else {
            ciphertext[i] = plaintext[i]; // Preserve spaces/punctuation
        }
    }
    ciphertext[i] = '\0';
}
void decrypt (char *ciphertext, int key[], char *plaintext) {
    int i;
    for (i = 0; ciphertext[i]; i++) {
        char ch = toupper(ciphertext[i]);
        if (ch >= 'A' && ch <= 'Z') {
            int c = ch - 'A';
            int p = (c - key[i] + 26) % 26;
            plaintext[i] = p + 'a';
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}
void findKeyFromPlainAndCipher(char *plaintext, char *ciphertext, int key[]) {
    int i;
    for (i = 0; plaintext[i]; i++) {
        char p = tolower(plaintext[i]);
        char c = toupper(ciphertext[i]);
        if (isalpha(p) && isalpha(c)) {
            key[i] = (c - 'A' - (p - 'a') + 26) % 26;
        } else {
            key[i] = -1; // Invalid key for space
        }
    }
}
void printKey(int key[], int len) {
    printf("Key stream: ");
    for (int i = 0; i < len; i++) {
        if (key[i] >= 0)
            printf("%d ", key[i]);
        else
            printf(". ");
    }
    printf("\n");
}
int main () {
    char plaintext1[] = "send more money";
    int keyStream[] = {9, 0, 1, 7, 23, 15, 21, 14, 11, 11, 2, 8, 9}; // 13 values
    char ciphertext [100], decrypted [100];
    encrypt (plaintext1, keyStream, ciphertext);
    printf("Encrypted Ciphertext: %s\n", ciphertext);
    char plaintext2[] = "cash not needed";
    int newKey[100];
    findKeyFromPlainAndCipher(plaintext2, ciphertext, newKey);
    printf("To decrypt ciphertext into: \"%s\"\n", plaintext2);
    printKey(newKey, strlen(plaintext2));
    return 0;
}
